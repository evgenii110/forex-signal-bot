import logging
from datetime import datetime
import random
import re

import pytz
from tradingview_ta import TA_Handler, Interval
from telegram import Update, ReplyKeyboardMarkup
from telegram.ext import Application, CommandHandler, MessageHandler, ContextTypes, filters

# =============== –ù–ê–°–¢–†–û–ô–ö–ò ===============
import os
TOKEN = os.getenv("TELEGRAM_TOKEN")


# –ü–µ—Ä–≤—ã–µ 20 –≤–∞–ª—é—Ç–Ω—ã—Ö –ø–∞—Ä
FOREX_PAIRS = [
    "EUR/USD", "GBP/USD", "USD/JPY", "USD/CHF", "AUD/USD",
    "NZD/USD", "USD/CAD", "EUR/GBP", "EUR/JPY", "GBP/JPY",
    "AUD/JPY", "CHF/JPY", "EUR/AUD", "EUR/CAD", "GBP/AUD",
    "GBP/CAD", "AUD/CAD", "NZD/JPY", "EUR/NZD", "GBP/NZD"
]

# OTC-–≤–µ—Ä—Å–∏–∏ (–±—É–¥–µ–º –∞–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å –±–∞–∑–æ–≤—É—é –ø–∞—Ä—É –∫–∞–∫ –ø—Ä–æ–∫—Å–∏)
OTC_PAIRS = [p + " OTC" for p in FOREX_PAIRS]

# –¢–∞–π–º—Ñ—Ä–µ–π–º—ã
TIMEFRAMES_FOREX = ["1m", "5m", "15m", "30m", "1h"]  # –±–µ–∑ 5s/10s/30s –¥–ª—è –æ–±—ã—á–Ω—ã—Ö –ø–∞—Ä
TIMEFRAMES_OTC   = ["5s", "10s", "30s", "1m", "5m", "15m", "30m", "1h"]

# –ö–∞—Ä—Ç–∞ —Ç–∞–π–º—Ñ—Ä–µ–π–º–æ–≤ TradingView (—Å–µ–∫—É–Ω–¥–Ω—ã–µ –º–∞–ø–∏–º –Ω–∞ 1m ‚Äî —É TV –Ω–µ—Ç 5s/10s/30s)
TF_MAP = {
    "5s":  Interval.INTERVAL_1_MINUTE,
    "10s": Interval.INTERVAL_1_MINUTE,
    "30s": Interval.INTERVAL_1_MINUTE,
    "1m":  Interval.INTERVAL_1_MINUTE,
    "5m":  Interval.INTERVAL_5_MINUTES,
    "15m": Interval.INTERVAL_15_MINUTES,
    "30m": Interval.INTERVAL_30_MINUTES,
    "1h":  Interval.INTERVAL_1_HOUR,
}

# –ö—Ä–∞—Ç–∫–∏–µ —É–≤–µ—Ä–µ–Ω–Ω—ã–µ –æ–±—ä—è—Å–Ω–µ–Ω–∏—è
EXPLANATIONS = {
    "BUY":  "üìà –ò–º–ø—É–ª—å—Å –≤–≤–µ—Ä—Ö ‚Äî –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä—ã –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–∞—é—Ç —Ä–æ—Å—Ç.",
    "SELL": "üìâ –î–∞–≤–ª–µ–Ω–∏–µ –≤–Ω–∏–∑ ‚Äî –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä—ã –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–∞—é—Ç —Å–Ω–∏–∂–µ–Ω–∏–µ.",
}

# –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

# –ü–∞–º—è—Ç—å –≤—ã–±–æ—Ä–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
user_data = {}

# =============== –í–°–ü–û–ú–û–ì–ê–¢–ï–õ–¨–ù–û–ï ===============
def is_market_closed() -> bool:
    """
    –†—ã–Ω–æ–∫ –∑–∞–∫—Ä—ã—Ç:
      - –°–±‚Äì–í—Å: –ø–æ–ª–Ω–æ—Å—Ç—å—é
      - –ü–Ω‚Äì–ü—Ç: —Å 22:45 –¥–æ 02:00 (–ø–æ Europe/Moscow)
    """
    tz = pytz.timezone("Europe/Moscow")
    now = datetime.now(tz)
    weekday = now.weekday()  # 0=–ü–Ω ‚Ä¶ 6=–í—Å
    hour = now.hour
    minute = now.minute

    if weekday in (5, 6):
        return True
    if (hour == 22 and minute >= 45) or (0 <= hour < 2):
        return True
    return False


def tv_symbol_from_pair(pair: str) -> str:
    """
    EUR/USD -> EURUSD (–¥–ª—è TradingView FX_IDC)
    –î–ª—è OTC: —É–¥–∞–ª—è–µ–º —Å—É—Ñ—Ñ–∏–∫—Å ' OTC' –∏ —Ç–æ–∂–µ –∫–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º.
    """
    base = pair.replace(" OTC", "")
    return base.replace("/", "")


def coerce_to_buy_sell(analysis) -> str:
    """
    –ü–µ—Ä–µ–≤–æ–¥–∏–º TV 'RECOMMENDATION' –≤ BUY/SELL.
    –ï—Å–ª–∏ NEUTRAL ‚Äî –∏—Å–ø–æ–ª—å–∑—É–µ–º —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ —Å–∫–æ–ª—å–∑—è—â–∏—Ö/–æ—Å—Ü–∏–ª–ª—è—Ç–æ—Ä–æ–≤, –∏–Ω–∞—á–µ —ç–≤—Ä–∏—Å—Ç–∏–∫–∞.
    """
    try:
        summary = (analysis.summary.get("RECOMMENDATION") or "").upper()
    except Exception:
        summary = ""

    if summary in ("BUY", "STRONG_BUY"):
        return "BUY"
    if summary in ("SELL", "STRONG_SELL"):
        return "SELL"

    # NEUTRAL ‚Üí –ø–æ–ø—Ä–æ–±—É–µ–º —É—Ç–æ—á–Ω–∏—Ç—å —á–µ—Ä–µ–∑ –ø–æ–¥—Å–µ–∫—Ü–∏–∏
    ma_rec = (analysis.moving_averages.get("RECOMMENDATION") or "").upper()
    if ma_rec in ("BUY", "STRONG_BUY"):
        return "BUY"
    if ma_rec in ("SELL", "STRONG_SELL"):
        return "SELL"

    osc_rec = (analysis.oscillators.get("RECOMMENDATION") or "").upper()
    if osc_rec in ("BUY", "STRONG_BUY"):
        return "BUY"
    if osc_rec in ("SELL", "STRONG_SELL"):
        return "SELL"

    # –ï—Å–ª–∏ —Å–æ–≤—Å–µ–º —Ä–∞–≤–Ω–æ–≤–µ—Å–∏–µ ‚Äî –ø—Ä–∏–º–µ–º —Å—Ç–æ—Ä–æ–Ω—É –ø–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤—É BUY/SELL –≤ –ú–ê
    try:
        ma_counts = analysis.moving_averages.get("COMPUTE") or {}
        buy_cnt  = sum(1 for v in ma_counts.values() if str(v).upper().startswith("BUY"))
        sell_cnt = sum(1 for v in ma_counts.values() if str(v).upper().startswith("SELL"))
        if buy_cnt > sell_cnt:
            return "BUY"
        if sell_cnt > buy_cnt:
            return "SELL"
    except Exception:
        pass

    # –ü–æ—Å–ª–µ–¥–Ω—è—è —Å—Ç—Ä–∞—Ö–æ–≤–∫–∞
    return random.choice(["BUY", "SELL"])


def analyze_with_tradingview(pair: str, timeframe: str, is_otc: bool) -> tuple[str, str]:
    """
    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç (signal, explain). –î–ª—è OTC –∏—Å–ø–æ–ª—å–∑—É–µ–º –±–∞–∑–æ–≤—É—é –ø–∞—Ä—É –∫–∞–∫ –ø—Ä–æ–∫—Å–∏.
    """
    symbol = tv_symbol_from_pair(pair)
    interval = TF_MAP.get(timeframe, Interval.INTERVAL_5_MINUTES)

    handler = TA_Handler(
        symbol=symbol,
        screener="forex",
        exchange="FX_IDC",
        interval=interval
    )
    analysis = handler.get_analysis()
    signal = coerce_to_buy_sell(analysis)
    explain = EXPLANATIONS[signal]
    return signal, explain


def build_keyboard(rows: list[list[str]]) -> ReplyKeyboardMarkup:
    return ReplyKeyboardMarkup(rows, resize_keyboard=True)


# =============== –•–ï–ù–î–õ–ï–†–´ ===============
async def main_menu(update: Update, context: ContextTypes.DEFAULT_TYPE):
    keyboard = [["–í—ã–±—Ä–∞—Ç—å –≤–∞–ª—é—Ç–Ω—É—é –ø–∞—Ä—É"], ["–û–±—ã—á–Ω—ã–µ –ø–∞—Ä—ã", "OTC –ø–∞—Ä—ã"]]
    await update.message.reply_text("–í—ã–±–µ—Ä–∏ –¥–µ–π—Å—Ç–≤–∏–µ:", reply_markup=build_keyboard(keyboard))


async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    keyboard = [["–í—ã–±—Ä–∞—Ç—å –≤–∞–ª—é—Ç–Ω—É—é –ø–∞—Ä—É"], ["–û–±—ã—á–Ω—ã–µ –ø–∞—Ä—ã", "OTC –ø–∞—Ä—ã"]]
    await update.message.reply_text("üëã –ü—Ä–∏–≤–µ—Ç! –Ø –±–æ—Ç-—Å–∏–≥–Ω–∞–ª—å—â–∏–∫. –í—ã–±–µ—Ä–∏ –¥–µ–π—Å—Ç–≤–∏–µ:", reply_markup=build_keyboard(keyboard))


async def choose_forex(update: Update, context: ContextTypes.DEFAULT_TYPE):
    keyboard = [[p] for p in FOREX_PAIRS] + [["–ù–∞–∑–∞–¥"]]
    await update.message.reply_text("–í—ã–±–µ—Ä–∏ –≤–∞–ª—é—Ç–Ω—É—é –ø–∞—Ä—É:", reply_markup=build_keyboard(keyboard))


async def choose_otc(update: Update, context: ContextTypes.DEFAULT_TYPE):
    keyboard = [[p] for p in OTC_PAIRS] + [["–ù–∞–∑–∞–¥"]]
    await update.message.reply_text("–í—ã–±–µ—Ä–∏ OTC –ø–∞—Ä—É:", reply_markup=build_keyboard(keyboard))


async def pair_chosen(update: Update, context: ContextTypes.DEFAULT_TYPE):
    text = update.message.text
    uid = update.message.from_user.id

    if text in FOREX_PAIRS:
        user_data[uid] = {"pair": text, "otc": False}
        tfs = TIMEFRAMES_FOREX
    elif text in OTC_PAIRS:
        user_data[uid] = {"pair": text, "otc": True}
        tfs = TIMEFRAMES_OTC
    else:
        return

    keyboard = [[tf] for tf in tfs] + [["–°–º–µ–Ω–∏—Ç—å –ø–∞—Ä—É", "–ù–∞–∑–∞–¥"]]
    await update.message.reply_text(f"‚úÖ –ü–∞—Ä–∞: {text}\n–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∞–π–º—Ñ—Ä–µ–π–º:", reply_markup=build_keyboard(keyboard))


async def timeframe_chosen(update: Update, context: ContextTypes.DEFAULT_TYPE):
    tf = update.message.text
    uid = update.message.from_user.id

    # –ü—Ä–æ–≤–µ—Ä–∏–º, —á—Ç–æ —ç—Ç–æ –æ–¥–∏–Ω –∏–∑ –∏–∑–≤–µ—Å—Ç–Ω—ã—Ö —Ç–∞–π–º—Ñ—Ä–µ–π–º–æ–≤
    if tf not in TIMEFRAMES_FOREX + TIMEFRAMES_OTC:
        return

    if uid not in user_data:
        await update.message.reply_text("–°–Ω–∞—á–∞–ª–∞ –≤—ã–±–µ—Ä–∏ –≤–∞–ª—é—Ç–Ω—É—é –ø–∞—Ä—É —á–µ—Ä–µ–∑ –∫–Ω–æ–ø–∫—É Start.")
        return

    pair = user_data[uid]["pair"]
    is_otc = user_data[uid]["otc"]

    # –†—ã–Ω–æ–∫ –∑–∞–∫—Ä—ã—Ç ‚Üí –æ–±—ã—á–Ω—ã–µ –ø–∞—Ä—ã –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã
    if (not is_otc) and is_market_closed():
        keyboard = [["OTC –ø–∞—Ä—ã", "–ù–∞–∑–∞–¥"]]
        await update.message.reply_text(
            "‚ùå –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö: —Ä—ã–Ω–æ–∫ –∑–∞–∫—Ä—ã—Ç.\nüëâ –ü–µ—Ä–µ–π—Ç–∏ –∫ OTC –ø–∞—Ä–∞–º?",
            reply_markup=build_keyboard(keyboard)
        )
        return

    # –ê–Ω–∞–ª–∏–∑ TradingView
    try:
        signal, short_explain = analyze_with_tradingview(pair, tf, is_otc)
        text = (
            f"üìä –ü–∞—Ä–∞: {pair}\n"
            f"‚è± –¢–∞–π–º—Ñ—Ä–µ–π–º: {tf}\n"
            f"üí° –°–∏–≥–Ω–∞–ª: {signal}\n\n"
            f"{short_explain}"
        )
    except Exception as e:
        logger.exception("–û—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞: %s", e)
        text = f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞ –¥–ª—è {pair} –Ω–∞ {tf}: {e}"

    await update.message.reply_text(text)


async def back(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await main_menu(update, context)


async def change_pair(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await main_menu(update, context)


# =============== MAIN ===============
def main():
    app = Application.builder().token(TOKEN).build()

    # –ö–æ–º–∞–Ω–¥—ã
    app.add_handler(CommandHandler("start", start))

    # –ö–Ω–æ–ø–∫–∏ –≤–µ—Ä—Ö–Ω–µ–≥–æ —É—Ä–æ–≤–Ω—è
    app.add_handler(MessageHandler(filters.Regex("^–û–±—ã—á–Ω—ã–µ –ø–∞—Ä—ã$"), choose_forex))
    app.add_handler(MessageHandler(filters.Regex("^OTC –ø–∞—Ä—ã$"), choose_otc))
    app.add_handler(MessageHandler(filters.Regex("^–ù–∞–∑–∞–¥$"), back))
    app.add_handler(MessageHandler(filters.Regex("^–í—ã–±—Ä–∞—Ç—å –≤–∞–ª—é—Ç–Ω—É—é –ø–∞—Ä—É$"), main_menu))
    app.add_handler(MessageHandler(filters.Regex("^–°–º–µ–Ω–∏—Ç—å –ø–∞—Ä—É$"), change_pair))

    # –°–Ω–∞—á–∞–ª–∞ —Ö—ç–Ω–¥–ª–µ—Ä —Ç–∞–π–º—Ñ—Ä–µ–π–º–æ–≤ (—á—Ç–æ–±—ã –æ–Ω –Ω–µ ¬´—Å—ä–µ–¥–∞–ª—Å—è¬ª –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–º –ø–∞—Ä)
    tf_regex = f"^({'|'.join(map(re.escape, TIMEFRAMES_FOREX + TIMEFRAMES_OTC))})$"
    app.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND & filters.Regex(tf_regex), timeframe_chosen))

    # –ó–∞—Ç–µ–º —Ö—ç–Ω–¥–ª–µ—Ä –ø–∞—Ä
    pairs_regex = f"^({'|'.join(map(re.escape, FOREX_PAIRS + OTC_PAIRS))})$"
    app.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND & filters.Regex(pairs_regex), pair_chosen))

    logger.info("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω...")
    app.run_polling()


if __name__ == "__main__":
    main()
